{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5e35023d-b8c2-48b8-a694-3914056c0a56",
   "metadata": {},
   "source": [
    "# Predicting heart disease using machine learning - By Evan Lemuel\n",
    "\n",
    "This notebook looks into various python-based machine learning and data science libraries in attempt to build a \n",
    "machine learning model capable of predicting whether or not someon has heart disease based on their medical attributes.\n",
    "\n",
    "We're going to take the following approach:\n",
    "1. Problem Defintion\n",
    "2. Data\n",
    "3. Evaluation\n",
    "4. Features\n",
    "5. Modelling\n",
    "6. Experimentation\n",
    "\n",
    "## 1.Problem Defintion\n",
    "In a statement,  \n",
    "> Given clinical parameters about a patient, can we predict whether or not they have heart disease?\n",
    "\n",
    "## 2.Data\n",
    "The original data came from the Cleveland data from the UCI Machine Learning Repository.  \n",
    "https://archive.ics.uci.edu/ml/datasets/heart+Disease\n",
    "\n",
    "There is also a version of it available on Kaggle.  \n",
    "https://www.kaggle.com/ronitf/heart-disease-uci\n",
    "\n",
    "## 3.Evaluation\n",
    "\n",
    "\n",
    "# Create data dictionary\n",
    "\n",
    "age: age in years  \n",
    "sex: (1 = male, 0 = female)  \n",
    "cp: chest pain type  \n",
    "trestbps: resting blood pressure (in mm Hg on admission to the hospital)  \n",
    "chol: serum cholesterol in mg/dl  \n",
    "fbs: fasting blood sugar > 120 mg/dl (1 = true; 0 = false)  \n",
    "restecg: resting electrocardiographic results  \n",
    "thalach: maximum heart rate achieved  \n",
    "exang: exercise induced angina (1 = yes; 0 = no)  \n",
    "oldpeak: ST depression induced by exercise relative to rest  \n",
    "slope: the slope of the peak exercise ST segment  \n",
    "ca: number of major vessels (0â€“3) colored by fluoroscopy  \n",
    "thal: 3 = normal; 6 = fixed defect; 7 = reversible defect  \n",
    "target: 1 or 0\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4446e2e5-5f0e-4dea-beba-ee0c8640799b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.6.1'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn\n",
    "sklearn.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac19c44a-64a3-4461-8e1a-bd8ca56222ce",
   "metadata": {},
   "source": [
    "## Preparing the tools\n",
    "We are going to use pandas, Matplotlib and NumPy for data analysis and manipulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "569d232b-e6fb-4c4e-8b28-2afd1a359b04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import all the tools we need.\n",
    "\n",
    "# Regular EDA\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "#Models from sklearn\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Model Evaluations\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n",
    "from sklearn.metrics import confusion_matrix,classification_report\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score\n",
    "from sklearn.metrics import RocCurveDisplay"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c998ac4b-fd05-46d8-81f9-7b395b438934",
   "metadata": {},
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9305979c-14ec-42c9-b725-82a807a5449b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(303, 14)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"heart-disease.csv\")\n",
    "df.shape #(rows,columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "faba1a4f-2690-47ab-ab76-e1243bf62b13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object `solve` not found.\n",
      "Object `types` not found.\n",
      "Object `it` not found.\n",
      "Object `them` not found.\n",
      "Object `data` not found.\n"
     ]
    }
   ],
   "source": [
    "## Data Exploration (Exploratory Analysis or EDA)\n",
    "\n",
    "##The goal here is to find out more about the data and become a subject matter export on the dataset youre working with.\n",
    "\n",
    "1. What questions sre you trying to solve?\n",
    "2. What kind of data do we have and how do we treat different data types?\n",
    "3. Whats missing from the data and how do you deal with it?\n",
    "4. What are the outliers and why should you care about them?\n",
    "5. How can you add, change or remove features to get more out of your data?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "04cdede7-5b55-4f78-9b0f-5d4612dfc89c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   63    1   3       145   233    1        0      150      0      2.3      0   \n",
       "1   37    1   2       130   250    0        1      187      0      3.5      0   \n",
       "2   41    0   1       130   204    0        0      172      0      1.4      2   \n",
       "3   56    1   1       120   236    0        1      178      0      0.8      2   \n",
       "4   57    0   0       120   354    0        1      163      1      0.6      2   \n",
       "\n",
       "   ca  thal  target  \n",
       "0   0     1       1  \n",
       "1   0     2       1  \n",
       "2   0     2       1  \n",
       "3   0     2       1  \n",
       "4   0     2       1  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f97041ce-5766-460f-8dfa-2035cb9cca18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>140</td>\n",
       "      <td>241</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>123</td>\n",
       "      <td>1</td>\n",
       "      <td>0.2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>110</td>\n",
       "      <td>264</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>132</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>68</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>144</td>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>57</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>174</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "298   57    0   0       140   241    0        1      123      1      0.2   \n",
       "299   45    1   3       110   264    0        1      132      0      1.2   \n",
       "300   68    1   0       144   193    1        1      141      0      3.4   \n",
       "301   57    1   0       130   131    0        1      115      1      1.2   \n",
       "302   57    0   1       130   236    0        0      174      0      0.0   \n",
       "\n",
       "     slope  ca  thal  target  \n",
       "298      1   0     3       0  \n",
       "299      1   0     3       0  \n",
       "300      1   2     3       0  \n",
       "301      1   1     3       0  \n",
       "302      1   1     2       0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8f27e32b-c3e4-4f17-b3cc-c0b9eda555dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "target\n",
       "1    165\n",
       "0    138\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's find out how many of each class there are\n",
    "df[\"target\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "87534f84-0816-4b21-9124-1cb22d512e43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[\"target\"].value_counts().plot(kind=\"bar\", color=[\"salmon\", \"lightblue\"])\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "af5c5936-a520-4c08-9574-1937a2519ef1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 303 entries, 0 to 302\n",
      "Data columns (total 14 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   age       303 non-null    int64  \n",
      " 1   sex       303 non-null    int64  \n",
      " 2   cp        303 non-null    int64  \n",
      " 3   trestbps  303 non-null    int64  \n",
      " 4   chol      303 non-null    int64  \n",
      " 5   fbs       303 non-null    int64  \n",
      " 6   restecg   303 non-null    int64  \n",
      " 7   thalach   303 non-null    int64  \n",
      " 8   exang     303 non-null    int64  \n",
      " 9   oldpeak   303 non-null    float64\n",
      " 10  slope     303 non-null    int64  \n",
      " 11  ca        303 non-null    int64  \n",
      " 12  thal      303 non-null    int64  \n",
      " 13  target    303 non-null    int64  \n",
      "dtypes: float64(1), int64(13)\n",
      "memory usage: 33.3 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "129747a0-dd78-4d9e-8711-4e3580c73a08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         0\n",
       "sex         0\n",
       "cp          0\n",
       "trestbps    0\n",
       "chol        0\n",
       "fbs         0\n",
       "restecg     0\n",
       "thalach     0\n",
       "exang       0\n",
       "oldpeak     0\n",
       "slope       0\n",
       "ca          0\n",
       "thal        0\n",
       "target      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Are there any missing values?\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f51e0297-f090-4387-af1e-b5add825bc35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.366337</td>\n",
       "      <td>0.683168</td>\n",
       "      <td>0.966997</td>\n",
       "      <td>131.623762</td>\n",
       "      <td>246.264026</td>\n",
       "      <td>0.148515</td>\n",
       "      <td>0.528053</td>\n",
       "      <td>149.646865</td>\n",
       "      <td>0.326733</td>\n",
       "      <td>1.039604</td>\n",
       "      <td>1.399340</td>\n",
       "      <td>0.729373</td>\n",
       "      <td>2.313531</td>\n",
       "      <td>0.544554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.082101</td>\n",
       "      <td>0.466011</td>\n",
       "      <td>1.032052</td>\n",
       "      <td>17.538143</td>\n",
       "      <td>51.830751</td>\n",
       "      <td>0.356198</td>\n",
       "      <td>0.525860</td>\n",
       "      <td>22.905161</td>\n",
       "      <td>0.469794</td>\n",
       "      <td>1.161075</td>\n",
       "      <td>0.616226</td>\n",
       "      <td>1.022606</td>\n",
       "      <td>0.612277</td>\n",
       "      <td>0.498835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>47.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>211.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>133.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>153.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>61.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>274.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>564.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              age         sex          cp    trestbps        chol         fbs  \\\n",
       "count  303.000000  303.000000  303.000000  303.000000  303.000000  303.000000   \n",
       "mean    54.366337    0.683168    0.966997  131.623762  246.264026    0.148515   \n",
       "std      9.082101    0.466011    1.032052   17.538143   51.830751    0.356198   \n",
       "min     29.000000    0.000000    0.000000   94.000000  126.000000    0.000000   \n",
       "25%     47.500000    0.000000    0.000000  120.000000  211.000000    0.000000   \n",
       "50%     55.000000    1.000000    1.000000  130.000000  240.000000    0.000000   \n",
       "75%     61.000000    1.000000    2.000000  140.000000  274.500000    0.000000   \n",
       "max     77.000000    1.000000    3.000000  200.000000  564.000000    1.000000   \n",
       "\n",
       "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
       "count  303.000000  303.000000  303.000000  303.000000  303.000000  303.000000   \n",
       "mean     0.528053  149.646865    0.326733    1.039604    1.399340    0.729373   \n",
       "std      0.525860   22.905161    0.469794    1.161075    0.616226    1.022606   \n",
       "min      0.000000   71.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "25%      0.000000  133.500000    0.000000    0.000000    1.000000    0.000000   \n",
       "50%      1.000000  153.000000    0.000000    0.800000    1.000000    0.000000   \n",
       "75%      1.000000  166.000000    1.000000    1.600000    2.000000    1.000000   \n",
       "max      2.000000  202.000000    1.000000    6.200000    2.000000    4.000000   \n",
       "\n",
       "             thal      target  \n",
       "count  303.000000  303.000000  \n",
       "mean     2.313531    0.544554  \n",
       "std      0.612277    0.498835  \n",
       "min      0.000000    0.000000  \n",
       "25%      2.000000    0.000000  \n",
       "50%      2.000000    1.000000  \n",
       "75%      3.000000    1.000000  \n",
       "max      3.000000    1.000000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b557f342-861a-4c8e-b68b-23765df316e4",
   "metadata": {},
   "source": [
    "### Heart Disease Frequency According To Sex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a3187cc8-9724-44f2-921d-994bb3c8479e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sex\n",
       "1    207\n",
       "0     96\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sex.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "92243c89-90ff-4f63-a917-a2b4727f1348",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>sex</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>72</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "sex      0    1\n",
       "target         \n",
       "0       24  114\n",
       "1       72   93"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compare target column with sex column\n",
    "pd.crosstab(df.target, df.sex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fd84077a-3a61-4ba5-b4d1-e15cd2bea573",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a plot crosstab\n",
    "pd.crosstab(df.target, df.sex).plot(kind=\"bar\", figsize=(10,6), color=[\"salmon\", \"lightblue\"]) \n",
    "plt.title(\"Heart Disease Frequency for Sex\")\n",
    "plt.xlabel(\"0=No Disease, 1=Disease\")\n",
    "plt.ylabel(\"Amount\")\n",
    "plt.legend([\"Female\", \"Male\"]); \n",
    "plt.xticks(rotation=0);\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b160f6d6-ae2e-446e-afb5-c7735d90443f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "thalach\n",
       "162    11\n",
       "160     9\n",
       "163     9\n",
       "152     8\n",
       "173     8\n",
       "       ..\n",
       "202     1\n",
       "184     1\n",
       "121     1\n",
       "192     1\n",
       "90      1\n",
       "Name: count, Length: 91, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"thalach\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e0474d0-75ef-4c8a-b6ba-8ee0a93eebd6",
   "metadata": {},
   "source": [
    "### Age vs. Max Rate for Heart Disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2d674760-e303-4a20-8151-073f656bd70a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "\n",
    "# Scatter with positive examples\n",
    "plt.scatter(df.age[df.target==1],\n",
    "            df.thalach[df.target==1],\n",
    "            c=\"salmon\")\n",
    "\n",
    "\n",
    "# Scatter with negative examples\n",
    "plt.scatter(df.age[df.target==0],\n",
    "            df.thalach[df.target==0],\n",
    "            c=\"lightblue\")\n",
    "\n",
    "\n",
    "#helpful info\n",
    "plt.title(\"Heart disease in function of Age and Max Heart Rate\")\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Max Heart Rate\")\n",
    "plt.legend([\"Disease\", \"No Disease\"]);\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "81093342-9c6f-4a40-be63-cbdc9e37fdff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.age.plot.hist();\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d077061-814f-412e-a0c0-51f9b7659370",
   "metadata": {},
   "source": [
    "## Heart Disease Frequency per chest pain type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a4c25bf1-cc2d-49b2-b420-544fe5e141a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>target</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>104</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "target    0   1\n",
       "cp             \n",
       "0       104  39\n",
       "1         9  41\n",
       "2        18  69\n",
       "3         7  16"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(df.cp, df.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9f248eed-b232-4752-9f24-babb6f7f556b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make the crosstab more visual\n",
    "pd.crosstab(df.cp, df.target).plot(kind = \"bar\",\n",
    "                                   figsize=(10,6),\n",
    "                                   color=[\"salmon\",\"lightblue\"])\n",
    "# Add some communictation\n",
    "plt.title(\"Heart disease frequency per chest pain type\")\n",
    "plt.xlabel(\"Chest Pain Type\")\n",
    "plt.ylabel(\"Amount\")\n",
    "plt.legend([\"No Disease\", \"Disease\"])\n",
    "plt.xticks(rotation=0);\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5725e5f4-9033-43e2-ae3e-3cfe8d67a610",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   63    1   3       145   233    1        0      150      0      2.3      0   \n",
       "1   37    1   2       130   250    0        1      187      0      3.5      0   \n",
       "2   41    0   1       130   204    0        0      172      0      1.4      2   \n",
       "3   56    1   1       120   236    0        1      178      0      0.8      2   \n",
       "4   57    0   0       120   354    0        1      163      1      0.6      2   \n",
       "\n",
       "   ca  thal  target  \n",
       "0   0     1       1  \n",
       "1   0     2       1  \n",
       "2   0     2       1  \n",
       "3   0     2       1  \n",
       "4   0     2       1  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "45fd636b-1309-478b-b853-4baf18e2ace2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.098447</td>\n",
       "      <td>-0.068653</td>\n",
       "      <td>0.279351</td>\n",
       "      <td>0.213678</td>\n",
       "      <td>0.121308</td>\n",
       "      <td>-0.116211</td>\n",
       "      <td>-0.398522</td>\n",
       "      <td>0.096801</td>\n",
       "      <td>0.210013</td>\n",
       "      <td>-0.168814</td>\n",
       "      <td>0.276326</td>\n",
       "      <td>0.068001</td>\n",
       "      <td>-0.225439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>-0.098447</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.049353</td>\n",
       "      <td>-0.056769</td>\n",
       "      <td>-0.197912</td>\n",
       "      <td>0.045032</td>\n",
       "      <td>-0.058196</td>\n",
       "      <td>-0.044020</td>\n",
       "      <td>0.141664</td>\n",
       "      <td>0.096093</td>\n",
       "      <td>-0.030711</td>\n",
       "      <td>0.118261</td>\n",
       "      <td>0.210041</td>\n",
       "      <td>-0.280937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cp</th>\n",
       "      <td>-0.068653</td>\n",
       "      <td>-0.049353</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.047608</td>\n",
       "      <td>-0.076904</td>\n",
       "      <td>0.094444</td>\n",
       "      <td>0.044421</td>\n",
       "      <td>0.295762</td>\n",
       "      <td>-0.394280</td>\n",
       "      <td>-0.149230</td>\n",
       "      <td>0.119717</td>\n",
       "      <td>-0.181053</td>\n",
       "      <td>-0.161736</td>\n",
       "      <td>0.433798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trestbps</th>\n",
       "      <td>0.279351</td>\n",
       "      <td>-0.056769</td>\n",
       "      <td>0.047608</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.123174</td>\n",
       "      <td>0.177531</td>\n",
       "      <td>-0.114103</td>\n",
       "      <td>-0.046698</td>\n",
       "      <td>0.067616</td>\n",
       "      <td>0.193216</td>\n",
       "      <td>-0.121475</td>\n",
       "      <td>0.101389</td>\n",
       "      <td>0.062210</td>\n",
       "      <td>-0.144931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chol</th>\n",
       "      <td>0.213678</td>\n",
       "      <td>-0.197912</td>\n",
       "      <td>-0.076904</td>\n",
       "      <td>0.123174</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.013294</td>\n",
       "      <td>-0.151040</td>\n",
       "      <td>-0.009940</td>\n",
       "      <td>0.067023</td>\n",
       "      <td>0.053952</td>\n",
       "      <td>-0.004038</td>\n",
       "      <td>0.070511</td>\n",
       "      <td>0.098803</td>\n",
       "      <td>-0.085239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fbs</th>\n",
       "      <td>0.121308</td>\n",
       "      <td>0.045032</td>\n",
       "      <td>0.094444</td>\n",
       "      <td>0.177531</td>\n",
       "      <td>0.013294</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.084189</td>\n",
       "      <td>-0.008567</td>\n",
       "      <td>0.025665</td>\n",
       "      <td>0.005747</td>\n",
       "      <td>-0.059894</td>\n",
       "      <td>0.137979</td>\n",
       "      <td>-0.032019</td>\n",
       "      <td>-0.028046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>restecg</th>\n",
       "      <td>-0.116211</td>\n",
       "      <td>-0.058196</td>\n",
       "      <td>0.044421</td>\n",
       "      <td>-0.114103</td>\n",
       "      <td>-0.151040</td>\n",
       "      <td>-0.084189</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.044123</td>\n",
       "      <td>-0.070733</td>\n",
       "      <td>-0.058770</td>\n",
       "      <td>0.093045</td>\n",
       "      <td>-0.072042</td>\n",
       "      <td>-0.011981</td>\n",
       "      <td>0.137230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thalach</th>\n",
       "      <td>-0.398522</td>\n",
       "      <td>-0.044020</td>\n",
       "      <td>0.295762</td>\n",
       "      <td>-0.046698</td>\n",
       "      <td>-0.009940</td>\n",
       "      <td>-0.008567</td>\n",
       "      <td>0.044123</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.378812</td>\n",
       "      <td>-0.344187</td>\n",
       "      <td>0.386784</td>\n",
       "      <td>-0.213177</td>\n",
       "      <td>-0.096439</td>\n",
       "      <td>0.421741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exang</th>\n",
       "      <td>0.096801</td>\n",
       "      <td>0.141664</td>\n",
       "      <td>-0.394280</td>\n",
       "      <td>0.067616</td>\n",
       "      <td>0.067023</td>\n",
       "      <td>0.025665</td>\n",
       "      <td>-0.070733</td>\n",
       "      <td>-0.378812</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.288223</td>\n",
       "      <td>-0.257748</td>\n",
       "      <td>0.115739</td>\n",
       "      <td>0.206754</td>\n",
       "      <td>-0.436757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oldpeak</th>\n",
       "      <td>0.210013</td>\n",
       "      <td>0.096093</td>\n",
       "      <td>-0.149230</td>\n",
       "      <td>0.193216</td>\n",
       "      <td>0.053952</td>\n",
       "      <td>0.005747</td>\n",
       "      <td>-0.058770</td>\n",
       "      <td>-0.344187</td>\n",
       "      <td>0.288223</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.577537</td>\n",
       "      <td>0.222682</td>\n",
       "      <td>0.210244</td>\n",
       "      <td>-0.430696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>slope</th>\n",
       "      <td>-0.168814</td>\n",
       "      <td>-0.030711</td>\n",
       "      <td>0.119717</td>\n",
       "      <td>-0.121475</td>\n",
       "      <td>-0.004038</td>\n",
       "      <td>-0.059894</td>\n",
       "      <td>0.093045</td>\n",
       "      <td>0.386784</td>\n",
       "      <td>-0.257748</td>\n",
       "      <td>-0.577537</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.080155</td>\n",
       "      <td>-0.104764</td>\n",
       "      <td>0.345877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ca</th>\n",
       "      <td>0.276326</td>\n",
       "      <td>0.118261</td>\n",
       "      <td>-0.181053</td>\n",
       "      <td>0.101389</td>\n",
       "      <td>0.070511</td>\n",
       "      <td>0.137979</td>\n",
       "      <td>-0.072042</td>\n",
       "      <td>-0.213177</td>\n",
       "      <td>0.115739</td>\n",
       "      <td>0.222682</td>\n",
       "      <td>-0.080155</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.151832</td>\n",
       "      <td>-0.391724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thal</th>\n",
       "      <td>0.068001</td>\n",
       "      <td>0.210041</td>\n",
       "      <td>-0.161736</td>\n",
       "      <td>0.062210</td>\n",
       "      <td>0.098803</td>\n",
       "      <td>-0.032019</td>\n",
       "      <td>-0.011981</td>\n",
       "      <td>-0.096439</td>\n",
       "      <td>0.206754</td>\n",
       "      <td>0.210244</td>\n",
       "      <td>-0.104764</td>\n",
       "      <td>0.151832</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.344029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <td>-0.225439</td>\n",
       "      <td>-0.280937</td>\n",
       "      <td>0.433798</td>\n",
       "      <td>-0.144931</td>\n",
       "      <td>-0.085239</td>\n",
       "      <td>-0.028046</td>\n",
       "      <td>0.137230</td>\n",
       "      <td>0.421741</td>\n",
       "      <td>-0.436757</td>\n",
       "      <td>-0.430696</td>\n",
       "      <td>0.345877</td>\n",
       "      <td>-0.391724</td>\n",
       "      <td>-0.344029</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               age       sex        cp  trestbps      chol       fbs  \\\n",
       "age       1.000000 -0.098447 -0.068653  0.279351  0.213678  0.121308   \n",
       "sex      -0.098447  1.000000 -0.049353 -0.056769 -0.197912  0.045032   \n",
       "cp       -0.068653 -0.049353  1.000000  0.047608 -0.076904  0.094444   \n",
       "trestbps  0.279351 -0.056769  0.047608  1.000000  0.123174  0.177531   \n",
       "chol      0.213678 -0.197912 -0.076904  0.123174  1.000000  0.013294   \n",
       "fbs       0.121308  0.045032  0.094444  0.177531  0.013294  1.000000   \n",
       "restecg  -0.116211 -0.058196  0.044421 -0.114103 -0.151040 -0.084189   \n",
       "thalach  -0.398522 -0.044020  0.295762 -0.046698 -0.009940 -0.008567   \n",
       "exang     0.096801  0.141664 -0.394280  0.067616  0.067023  0.025665   \n",
       "oldpeak   0.210013  0.096093 -0.149230  0.193216  0.053952  0.005747   \n",
       "slope    -0.168814 -0.030711  0.119717 -0.121475 -0.004038 -0.059894   \n",
       "ca        0.276326  0.118261 -0.181053  0.101389  0.070511  0.137979   \n",
       "thal      0.068001  0.210041 -0.161736  0.062210  0.098803 -0.032019   \n",
       "target   -0.225439 -0.280937  0.433798 -0.144931 -0.085239 -0.028046   \n",
       "\n",
       "           restecg   thalach     exang   oldpeak     slope        ca  \\\n",
       "age      -0.116211 -0.398522  0.096801  0.210013 -0.168814  0.276326   \n",
       "sex      -0.058196 -0.044020  0.141664  0.096093 -0.030711  0.118261   \n",
       "cp        0.044421  0.295762 -0.394280 -0.149230  0.119717 -0.181053   \n",
       "trestbps -0.114103 -0.046698  0.067616  0.193216 -0.121475  0.101389   \n",
       "chol     -0.151040 -0.009940  0.067023  0.053952 -0.004038  0.070511   \n",
       "fbs      -0.084189 -0.008567  0.025665  0.005747 -0.059894  0.137979   \n",
       "restecg   1.000000  0.044123 -0.070733 -0.058770  0.093045 -0.072042   \n",
       "thalach   0.044123  1.000000 -0.378812 -0.344187  0.386784 -0.213177   \n",
       "exang    -0.070733 -0.378812  1.000000  0.288223 -0.257748  0.115739   \n",
       "oldpeak  -0.058770 -0.344187  0.288223  1.000000 -0.577537  0.222682   \n",
       "slope     0.093045  0.386784 -0.257748 -0.577537  1.000000 -0.080155   \n",
       "ca       -0.072042 -0.213177  0.115739  0.222682 -0.080155  1.000000   \n",
       "thal     -0.011981 -0.096439  0.206754  0.210244 -0.104764  0.151832   \n",
       "target    0.137230  0.421741 -0.436757 -0.430696  0.345877 -0.391724   \n",
       "\n",
       "              thal    target  \n",
       "age       0.068001 -0.225439  \n",
       "sex       0.210041 -0.280937  \n",
       "cp       -0.161736  0.433798  \n",
       "trestbps  0.062210 -0.144931  \n",
       "chol      0.098803 -0.085239  \n",
       "fbs      -0.032019 -0.028046  \n",
       "restecg  -0.011981  0.137230  \n",
       "thalach  -0.096439  0.421741  \n",
       "exang     0.206754 -0.436757  \n",
       "oldpeak   0.210244 -0.430696  \n",
       "slope    -0.104764  0.345877  \n",
       "ca        0.151832 -0.391724  \n",
       "thal      1.000000 -0.344029  \n",
       "target   -0.344029  1.000000  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make a correlation matrix\n",
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e1dba8a8-ebe9-44b5-97e6-84d190e2d2b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1500x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Correlation matrix\n",
    "corr_matrix = df.corr()\n",
    "\n",
    "# Create figure and axis\n",
    "fig, ax = plt.subplots(figsize=(15, 10))\n",
    "\n",
    "# Create heatmap\n",
    "ax = sns.heatmap(\n",
    "    corr_matrix,\n",
    "    annot=True,\n",
    "    linewidths=0.5,\n",
    "    fmt=\".2f\",\n",
    "    cmap=\"YlGnBu\"\n",
    ")\n",
    "\n",
    "# Fix for displaying the entire heatmap correctly\n",
    "bottom, top = ax.get_ylim()\n",
    "ax.set_ylim(bottom + 0.5, top - 0.5)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c775963-3676-43ad-bc3f-8cb0ccd08039",
   "metadata": {},
   "source": [
    "## Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "650926d7-613d-412c-a00a-c0009656eb52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   63    1   3       145   233    1        0      150      0      2.3      0   \n",
       "1   37    1   2       130   250    0        1      187      0      3.5      0   \n",
       "2   41    0   1       130   204    0        0      172      0      1.4      2   \n",
       "3   56    1   1       120   236    0        1      178      0      0.8      2   \n",
       "4   57    0   0       120   354    0        1      163      1      0.6      2   \n",
       "\n",
       "   ca  thal  target  \n",
       "0   0     1       1  \n",
       "1   0     2       1  \n",
       "2   0     2       1  \n",
       "3   0     2       1  \n",
       "4   0     2       1  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "e8e2b782-0866-49a0-bc61-44c22352b391",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the data into x and y\n",
    "x = df.drop(\"target\", axis=1)\n",
    "\n",
    "y = df[\"target\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "d523f02e-b344-4f9f-99bc-4dafb3d89653",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>140</td>\n",
       "      <td>241</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>123</td>\n",
       "      <td>1</td>\n",
       "      <td>0.2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>110</td>\n",
       "      <td>264</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>132</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>68</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>144</td>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>57</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>174</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>303 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0     63    1   3       145   233    1        0      150      0      2.3   \n",
       "1     37    1   2       130   250    0        1      187      0      3.5   \n",
       "2     41    0   1       130   204    0        0      172      0      1.4   \n",
       "3     56    1   1       120   236    0        1      178      0      0.8   \n",
       "4     57    0   0       120   354    0        1      163      1      0.6   \n",
       "..   ...  ...  ..       ...   ...  ...      ...      ...    ...      ...   \n",
       "298   57    0   0       140   241    0        1      123      1      0.2   \n",
       "299   45    1   3       110   264    0        1      132      0      1.2   \n",
       "300   68    1   0       144   193    1        1      141      0      3.4   \n",
       "301   57    1   0       130   131    0        1      115      1      1.2   \n",
       "302   57    0   1       130   236    0        0      174      0      0.0   \n",
       "\n",
       "     slope  ca  thal  \n",
       "0        0   0     1  \n",
       "1        0   0     2  \n",
       "2        2   0     2  \n",
       "3        2   0     2  \n",
       "4        2   0     2  \n",
       "..     ...  ..   ...  \n",
       "298      1   0     3  \n",
       "299      1   0     3  \n",
       "300      1   2     3  \n",
       "301      1   1     3  \n",
       "302      1   1     2  \n",
       "\n",
       "[303 rows x 13 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "83242353-8ac5-42a3-a01e-c44cf1739555",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      1\n",
       "2      1\n",
       "3      1\n",
       "4      1\n",
       "      ..\n",
       "298    0\n",
       "299    0\n",
       "300    0\n",
       "301    0\n",
       "302    0\n",
       "Name: target, Length: 303, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "78063bac-6153-4145-b04d-6f4de842f570",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SPLIT DATA into train and test sets\n",
    "np.random.seed(42)\n",
    "\n",
    "#Split into train and test set\n",
    "x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "b33560c2-4547-4988-8862-1d6d4d59490e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>295</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>162</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>270</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111</td>\n",
       "      <td>1</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>150</td>\n",
       "      <td>231</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>147</td>\n",
       "      <td>0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>135</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>161</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>117</td>\n",
       "      <td>230</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>160</td>\n",
       "      <td>1</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>140</td>\n",
       "      <td>233</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>94</td>\n",
       "      <td>227</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>154</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>69</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>160</td>\n",
       "      <td>234</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>249</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>144</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>140</td>\n",
       "      <td>195</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>179</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>242 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "132   42    1   1       120   295    0        1      162      0      0.0   \n",
       "202   58    1   0       150   270    0        0      111      1      0.8   \n",
       "196   46    1   2       150   231    0        1      147      0      3.6   \n",
       "75    55    0   1       135   250    0        0      161      0      1.4   \n",
       "176   60    1   0       117   230    1        1      160      1      1.4   \n",
       "..   ...  ...  ..       ...   ...  ...      ...      ...    ...      ...   \n",
       "188   50    1   2       140   233    0        1      163      0      0.6   \n",
       "71    51    1   2        94   227    0        1      154      1      0.0   \n",
       "106   69    1   3       160   234    1        0      131      0      0.1   \n",
       "270   46    1   0       120   249    0        0      144      0      0.8   \n",
       "102   63    0   1       140   195    0        1      179      0      0.0   \n",
       "\n",
       "     slope  ca  thal  \n",
       "132      2   0     2  \n",
       "202      2   0     3  \n",
       "196      1   0     2  \n",
       "75       1   0     2  \n",
       "176      2   2     3  \n",
       "..     ...  ..   ...  \n",
       "188      1   1     3  \n",
       "71       2   1     3  \n",
       "106      1   1     2  \n",
       "270      2   0     3  \n",
       "102      2   2     2  \n",
       "\n",
       "[242 rows x 13 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "9dad12d9-89a7-43d3-be5a-d8c745eeeaba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(132    1\n",
       " 202    0\n",
       " 196    0\n",
       " 75     1\n",
       " 176    0\n",
       "       ..\n",
       " 188    0\n",
       " 71     1\n",
       " 106    1\n",
       " 270    0\n",
       " 102    1\n",
       " Name: target, Length: 242, dtype: int64,\n",
       " 242)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train, len(y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b398f1e-c912-4ba5-a2d4-23af5b65ca9d",
   "metadata": {},
   "source": [
    " ## Now we have split our data into training and test sets, now it is time to build the Model\n",
    "\n",
    "We'll train it using the test set(find the patterns) on the training set.\n",
    "\n",
    "And we'll test it (use the patterns) on the test set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba8affa9-bb3b-4a07-9f29-8635cb3a6ce2",
   "metadata": {},
   "source": [
    "# We will try 3 different machine learning models\n",
    "1. Logistic Regression\n",
    "2. K-nearest neighbours\n",
    "3. Random-Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "3107d8e9-466f-4c7a-8dba-fd44a3f3739d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import numpy as np\n",
    "\n",
    "# Put models in the dictionary\n",
    "models = {\n",
    "    \"Logistic Regression\": LogisticRegression(),\n",
    "    \"KNN\": KNeighborsClassifier(),\n",
    "    \"Random Forest\": RandomForestClassifier()\n",
    "}\n",
    "\n",
    "# Create a function to fit and score models\n",
    "def fit_and_score(models, x_train, x_test, y_train, y_test):\n",
    "    \"\"\"\n",
    "    Fits and evaluates given machine learning models.\n",
    "    models : a dict of different Scikit-Learn machine learning models\n",
    "    x_train : training data (no labels)\n",
    "    x_test : testing data (no labels)\n",
    "    y_train : training labels\n",
    "    y_test : test labels\n",
    "    \"\"\"\n",
    "    # Set random seed\n",
    "    np.random.seed(42)\n",
    "\n",
    "    # Make a dictionary to keep model scores\n",
    "    model_scores = {}\n",
    "\n",
    "    # Loop through models\n",
    "    for name, model in models.items():\n",
    "        # Fit the model to the data\n",
    "        model.fit(x_train, y_train)\n",
    "\n",
    "        # Evaluate the model and store its score\n",
    "        model_scores[name] = model.score(x_test, y_test)\n",
    "\n",
    "    return model_scores\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "37db07bd-8b1c-4a37-90b2-ede1d15db2da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Logistic Regression': 0.8852459016393442, 'KNN': 0.6885245901639344, 'Random Forest': 0.8360655737704918}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\Desktop\\Aiml-course-ZTM\\heart-disease-project\\env\\Lib\\site-packages\\sklearn\\linear_model\\_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "model_scores = fit_and_score(models=models, \n",
    "                             x_train=x_train, \n",
    "                             x_test=x_test, \n",
    "                             y_train=y_train, \n",
    "                             y_test=y_test)\n",
    "\n",
    "print(model_scores)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "835af61a-ddce-4ecc-a3c3-7110d767906f",
   "metadata": {},
   "source": [
    "## Model Comparision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "8c872973-7796-467f-8426-9f4e719c9138",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_compare = pd.DataFrame(model_scores, index = [\"accuracy\"])\n",
    "model_compare.T.plot.bar();\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c38effc-2bc0-4fc6-b8f5-075e6b499c3c",
   "metadata": {},
   "source": [
    "For now we have a baseline model, but we can never base our final just from a basic model's first predictions.\n",
    "Now we've got a baseline model... and we know a model's first predictions aren't always what we should based our next steps off. What should we do?\n",
    "\n",
    "Let's look at the following:\n",
    "\n",
    "Hypertparameter tuning\n",
    "\n",
    "Feature importance\n",
    "\n",
    "Confusion matrix\n",
    "\n",
    "Cross-validation\n",
    "\n",
    "Precision\n",
    "\n",
    "Recall\n",
    "\n",
    "F1 score\n",
    "\n",
    "Classification report\n",
    "\n",
    "ROC curve\n",
    "\n",
    "Area under the curve (AUC)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d63fd2d5-5eab-45b7-90c7-06863f7ecc47",
   "metadata": {},
   "source": [
    "## Hyperparameter Tuning (By hand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "3154d7b4-1abe-4234-b276-f64a8cc604ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_scores = []\n",
    "test_scores = []\n",
    "\n",
    "# Create a list of different values for n_neighbors\n",
    "neighbors = range(1, 21)\n",
    "\n",
    "# Setup KNN instance\n",
    "knn = KNeighborsClassifier()\n",
    "\n",
    "# Loop through different n_neighbors\n",
    "for i in neighbors:\n",
    "    knn.set_params(n_neighbors=i)\n",
    "    \n",
    "    # Fit the algorithm\n",
    "    knn.fit(x_train, y_train)\n",
    "    \n",
    "    # Update the training scores list\n",
    "    train_scores.append(knn.score(x_train, y_train))\n",
    "    \n",
    "    # Update the test scores list\n",
    "    test_scores.append(knn.score(x_test, y_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "1bd6df38-55c4-4882-aa76-51038c086820",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0,\n",
       " 0.8099173553719008,\n",
       " 0.7727272727272727,\n",
       " 0.743801652892562,\n",
       " 0.7603305785123967,\n",
       " 0.7520661157024794,\n",
       " 0.743801652892562,\n",
       " 0.7231404958677686,\n",
       " 0.71900826446281,\n",
       " 0.6942148760330579,\n",
       " 0.7272727272727273,\n",
       " 0.6983471074380165,\n",
       " 0.6900826446280992,\n",
       " 0.6942148760330579,\n",
       " 0.6859504132231405,\n",
       " 0.6735537190082644,\n",
       " 0.6859504132231405,\n",
       " 0.6652892561983471,\n",
       " 0.6818181818181818,\n",
       " 0.6694214876033058]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "39b79f70-ccaa-4b50-9c35-f9ebff6ecfab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.6229508196721312,\n",
       " 0.639344262295082,\n",
       " 0.6557377049180327,\n",
       " 0.6721311475409836,\n",
       " 0.6885245901639344,\n",
       " 0.7213114754098361,\n",
       " 0.7049180327868853,\n",
       " 0.6885245901639344,\n",
       " 0.6885245901639344,\n",
       " 0.7049180327868853,\n",
       " 0.7540983606557377,\n",
       " 0.7377049180327869,\n",
       " 0.7377049180327869,\n",
       " 0.7377049180327869,\n",
       " 0.6885245901639344,\n",
       " 0.7213114754098361,\n",
       " 0.6885245901639344,\n",
       " 0.6885245901639344,\n",
       " 0.7049180327868853,\n",
       " 0.6557377049180327]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "41c52f1b-45dd-4aaf-b3d5-c58db2abc937",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Maximum KNN score on the test data: 75.41%\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(neighbors, train_scores, label = \"Train Score\")\n",
    "plt.plot(neighbors, test_scores, label = \"Test Score\")\n",
    "plt.xticks(np.arange(1, 21, 1))\n",
    "plt.xlabel(\"Numer of Neighbours\")\n",
    "plt.ylabel(\"Model Score\")\n",
    "plt.legend()\n",
    "\n",
    "print(f\" Maximum KNN score on the test data: {max(test_scores)*100:.2f}%\")\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6a091c6-7772-4c11-b032-cf76b0276161",
   "metadata": {},
   "source": [
    "## Hyperparameter tuning with randomised searchCV\n",
    "We are going to tune:\n",
    "logistic regression()\n",
    "RandomForestClassifier()\n",
    "....using randomised searchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "bc6d4795-4fd5-4582-b5d0-9a5e832ef8bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a Hyperparameter grid for LogisticRegression\n",
    "log_reg_grid = {\n",
    "    \"C\": np.logspace(-4, 4, 20),\n",
    "    \"solver\": [\"liblinear\"]\n",
    "}\n",
    "\n",
    "# Create a Hyperparameter grid for RandomForestClassifier\n",
    "rf_grid = {\n",
    "    \"n_estimators\": np.arange(10, 1000, 50),\n",
    "    \"max_depth\": [None, 3, 5, 10],\n",
    "    \"min_samples_split\": [2, 5, 10],\n",
    "    \"min_samples_leaf\": np.arange(1, 20, 2)\n",
    "}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d78f9ac-d284-430f-a04b-daf6283a054b",
   "metadata": {},
   "source": [
    "Now we have hperparameters setup for each of our models,lets tune them using randomized searchCV\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "e6ba134b-d163-44df-98af-464aa7745dfd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=20,\n",
       "                   param_distributions={&#x27;C&#x27;: array([1.00000000e-04, 2.63665090e-04, 6.95192796e-04, 1.83298071e-03,\n",
       "       4.83293024e-03, 1.27427499e-02, 3.35981829e-02, 8.85866790e-02,\n",
       "       2.33572147e-01, 6.15848211e-01, 1.62377674e+00, 4.28133240e+00,\n",
       "       1.12883789e+01, 2.97635144e+01, 7.84759970e+01, 2.06913808e+02,\n",
       "       5.45559478e+02, 1.43844989e+03, 3.79269019e+03, 1.00000000e+04]),\n",
       "                                        &#x27;solver&#x27;: [&#x27;liblinear&#x27;]},\n",
       "                   verbose=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomizedSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.RandomizedSearchCV.html\">?<span>Documentation for RandomizedSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=20,\n",
       "                   param_distributions={&#x27;C&#x27;: array([1.00000000e-04, 2.63665090e-04, 6.95192796e-04, 1.83298071e-03,\n",
       "       4.83293024e-03, 1.27427499e-02, 3.35981829e-02, 8.85866790e-02,\n",
       "       2.33572147e-01, 6.15848211e-01, 1.62377674e+00, 4.28133240e+00,\n",
       "       1.12883789e+01, 2.97635144e+01, 7.84759970e+01, 2.06913808e+02,\n",
       "       5.45559478e+02, 1.43844989e+03, 3.79269019e+03, 1.00000000e+04]),\n",
       "                                        &#x27;solver&#x27;: [&#x27;liblinear&#x27;]},\n",
       "                   verbose=True)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: LogisticRegression</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=np.float64(0.23357214690901212), solver=&#x27;liblinear&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=np.float64(0.23357214690901212), solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=20,\n",
       "                   param_distributions={'C': array([1.00000000e-04, 2.63665090e-04, 6.95192796e-04, 1.83298071e-03,\n",
       "       4.83293024e-03, 1.27427499e-02, 3.35981829e-02, 8.85866790e-02,\n",
       "       2.33572147e-01, 6.15848211e-01, 1.62377674e+00, 4.28133240e+00,\n",
       "       1.12883789e+01, 2.97635144e+01, 7.84759970e+01, 2.06913808e+02,\n",
       "       5.45559478e+02, 1.43844989e+03, 3.79269019e+03, 1.00000000e+04]),\n",
       "                                        'solver': ['liblinear']},\n",
       "                   verbose=True)"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tune LogisticRegression\n",
    "\n",
    "np.random.seed(42)\n",
    "\n",
    "# Setup random hyperparameter search for LogisticRegression\n",
    "rs_log_reg = RandomizedSearchCV(LogisticRegression(),\n",
    "                                param_distributions=log_reg_grid,\n",
    "                                cv=5,\n",
    "                                n_iter=20,\n",
    "                                verbose=True)\n",
    "\n",
    "# Fit random hyperparameter search model for LogisticRegression\n",
    "rs_log_reg.fit(x_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "4ddda45a-821d-4362-a3b7-853c4a7289d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8852459016393442"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rs_log_reg.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fc25966-b7a9-4f91-9bce-4f31211a50ab",
   "metadata": {},
   "source": [
    "# Now we've tuned LogisticRegression(), Let us now tune RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "3469170d-d73c-4147-ac1f-45dad03ff09d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(), n_iter=20,\n",
       "                   param_distributions={&#x27;max_depth&#x27;: [None, 3, 5, 10],\n",
       "                                        &#x27;min_samples_leaf&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19]),\n",
       "                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
       "                                        &#x27;n_estimators&#x27;: array([ 10,  60, 110, 160, 210, 260, 310, 360, 410, 460, 510, 560, 610,\n",
       "       660, 710, 760, 810, 860, 910, 960])},\n",
       "                   verbose=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomizedSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.RandomizedSearchCV.html\">?<span>Documentation for RandomizedSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(), n_iter=20,\n",
       "                   param_distributions={&#x27;max_depth&#x27;: [None, 3, 5, 10],\n",
       "                                        &#x27;min_samples_leaf&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19]),\n",
       "                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
       "                                        &#x27;n_estimators&#x27;: array([ 10,  60, 110, 160, 210, 260, 310, 360, 410, 460, 510, 560, 610,\n",
       "       660, 710, 760, 810, 860, 910, 960])},\n",
       "                   verbose=True)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: RandomForestClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=3, min_samples_leaf=np.int64(9),\n",
       "                       min_samples_split=5, n_estimators=np.int64(10))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=3, min_samples_leaf=np.int64(9),\n",
       "                       min_samples_split=5, n_estimators=np.int64(10))</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(), n_iter=20,\n",
       "                   param_distributions={'max_depth': [None, 3, 5, 10],\n",
       "                                        'min_samples_leaf': array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19]),\n",
       "                                        'min_samples_split': [2, 5, 10],\n",
       "                                        'n_estimators': array([ 10,  60, 110, 160, 210, 260, 310, 360, 410, 460, 510, 560, 610,\n",
       "       660, 710, 760, 810, 860, 910, 960])},\n",
       "                   verbose=True)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  Tuning Random forest Classifier\n",
    "\n",
    "np.random.seed(42)\n",
    "\n",
    "# Setup random hyperparameter search for LogisticRegression\n",
    "rs_rf = RandomizedSearchCV(RandomForestClassifier(),\n",
    "                                param_distributions=rf_grid,\n",
    "                                cv=5,\n",
    "                                n_iter=20,\n",
    "                                verbose=True)\n",
    "\n",
    "# Fit random hyperparameter search model for LogisticRegression\n",
    "rs_rf.fit(x_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "4279bd11-3204-44bd-a752-37319464d960",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_estimators': np.int64(10),\n",
       " 'min_samples_split': 5,\n",
       " 'min_samples_leaf': np.int64(9),\n",
       " 'max_depth': 3}"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rs_rf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "b0d76bab-32ae-479d-bbd9-dd7861ea3ca6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8688524590163934"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Evaluate it\n",
    "rs_rf.score(x_test, y_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0a760a3-d505-4ebf-8f4b-fd7bd36ac164",
   "metadata": {},
   "source": [
    "## Hyperparamter tuning using GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "705254c1-d84f-4787-b786-b8f587aaba3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 30 candidates, totalling 150 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=LogisticRegression(),\n",
       "             param_grid={&#x27;C&#x27;: array([1.00000000e-04, 1.88739182e-04, 3.56224789e-04, 6.72335754e-04,\n",
       "       1.26896100e-03, 2.39502662e-03, 4.52035366e-03, 8.53167852e-03,\n",
       "       1.61026203e-02, 3.03919538e-02, 5.73615251e-02, 1.08263673e-01,\n",
       "       2.04335972e-01, 3.85662042e-01, 7.27895384e-01, 1.37382380e+00,\n",
       "       2.59294380e+00, 4.89390092e+00, 9.23670857e+00, 1.74332882e+01,\n",
       "       3.29034456e+01, 6.21016942e+01, 1.17210230e+02, 2.21221629e+02,\n",
       "       4.17531894e+02, 7.88046282e+02, 1.48735211e+03, 2.80721620e+03,\n",
       "       5.29831691e+03, 1.00000000e+04]),\n",
       "                         &#x27;solver&#x27;: [&#x27;liblinear&#x27;]},\n",
       "             verbose=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=LogisticRegression(),\n",
       "             param_grid={&#x27;C&#x27;: array([1.00000000e-04, 1.88739182e-04, 3.56224789e-04, 6.72335754e-04,\n",
       "       1.26896100e-03, 2.39502662e-03, 4.52035366e-03, 8.53167852e-03,\n",
       "       1.61026203e-02, 3.03919538e-02, 5.73615251e-02, 1.08263673e-01,\n",
       "       2.04335972e-01, 3.85662042e-01, 7.27895384e-01, 1.37382380e+00,\n",
       "       2.59294380e+00, 4.89390092e+00, 9.23670857e+00, 1.74332882e+01,\n",
       "       3.29034456e+01, 6.21016942e+01, 1.17210230e+02, 2.21221629e+02,\n",
       "       4.17531894e+02, 7.88046282e+02, 1.48735211e+03, 2.80721620e+03,\n",
       "       5.29831691e+03, 1.00000000e+04]),\n",
       "                         &#x27;solver&#x27;: [&#x27;liblinear&#x27;]},\n",
       "             verbose=True)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: LogisticRegression</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=np.float64(0.20433597178569418), solver=&#x27;liblinear&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=np.float64(0.20433597178569418), solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=LogisticRegression(),\n",
       "             param_grid={'C': array([1.00000000e-04, 1.88739182e-04, 3.56224789e-04, 6.72335754e-04,\n",
       "       1.26896100e-03, 2.39502662e-03, 4.52035366e-03, 8.53167852e-03,\n",
       "       1.61026203e-02, 3.03919538e-02, 5.73615251e-02, 1.08263673e-01,\n",
       "       2.04335972e-01, 3.85662042e-01, 7.27895384e-01, 1.37382380e+00,\n",
       "       2.59294380e+00, 4.89390092e+00, 9.23670857e+00, 1.74332882e+01,\n",
       "       3.29034456e+01, 6.21016942e+01, 1.17210230e+02, 2.21221629e+02,\n",
       "       4.17531894e+02, 7.88046282e+02, 1.48735211e+03, 2.80721620e+03,\n",
       "       5.29831691e+03, 1.00000000e+04]),\n",
       "                         'solver': ['liblinear']},\n",
       "             verbose=True)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Different hyperparameters for our LogisticRegression model\n",
    "log_reg_grid = {\"C\": np.logspace(-4, 4, 30),\n",
    "                \"solver\": [\"liblinear\"]}\n",
    "\n",
    "# Setup grid hyperparameter search for LogisticRegression\n",
    "gs_log_reg = GridSearchCV(LogisticRegression(),\n",
    "                          param_grid=log_reg_grid,\n",
    "                          cv=5,\n",
    "                          verbose=True)\n",
    "\n",
    "# Fit grid hyperparameter search model\n",
    "gs_log_reg.fit(x_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "0df49a57-8986-484d-ad97-61666dbd7a1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': np.float64(0.20433597178569418), 'solver': 'liblinear'}"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs_log_reg.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "df271220-83fc-47e6-9447-28d6d16d6c75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8852459016393442"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs_log_reg.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "bc30ccb5-a289-42f6-bcd5-d017f4a016e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Logistic Regression': 0.8852459016393442,\n",
       " 'KNN': 0.6885245901639344,\n",
       " 'Random Forest': 0.8360655737704918}"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_scores"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be8df9bd-c656-4f2c-8229-01841ea644fd",
   "metadata": {},
   "source": [
    "# Now we will do the roc score...etc etc.. from\n",
    "Precision\n",
    "\n",
    "Recall\n",
    "\n",
    "F1 score\n",
    "\n",
    "Classification report\n",
    "\n",
    "ROC curve\n",
    "\n",
    "Area under the curve (AUC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "7b05bac9-6b24-4bc0-996d-d9ae3efc0ffc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make predictions with tuned model\n",
    "y_preds = gs_log_reg.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "18bc26db-273a-4287-b272-2662714bb358",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "179    0\n",
       "228    0\n",
       "111    1\n",
       "246    0\n",
       "60     1\n",
       "      ..\n",
       "249    0\n",
       "104    1\n",
       "300    0\n",
       "193    0\n",
       "184    0\n",
       "Name: target, Length: 61, dtype: int64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "aa5723a6-a38c-4a28-ae4b-456d2814e22a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot ROC curve and calculate the AUC metric\n",
    "# Import necessary libraries\n",
    "from sklearn.metrics import RocCurveDisplay\n",
    "import matplotlib.pyplot as plt\n",
    "# Import necessary libraries\n",
    "from sklearn.metrics import RocCurveDisplay\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot ROC curve using the best estimator from GridSearchCV\n",
    "RocCurveDisplay.from_estimator(gs_log_reg.best_estimator_, x_test, y_test)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "02cbd0f7-102a-4a70-b1a0-c8b9a428d9a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[25  4]\n",
      " [ 3 29]]\n"
     ]
    }
   ],
   "source": [
    "# Confusionn Matrix\n",
    "print(confusion_matrix(y_test, y_preds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "c93c24db-075f-40a8-825a-6eafaead3d3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plots a nice looking confusion matrix using Seaborn's heatmap()\n",
    "fig, ax = plt.subplots(figsize=(3, 3))\n",
    "ax = sns.heatmap(confusion_matrix(y_test, y_preds), \n",
    "                 annot=True, \n",
    "                 cbar=False)\n",
    "plt.xlabel(\"True label\")\n",
    "plt.ylabel(\"Predicted label\")\n",
    "bottom, top = ax.get_ylim()\n",
    "ax.set_ylim(bottom + 0.5, top - 0.5)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "285a0e15-87e9-4f6e-a12c-5175cff6a584",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.86      0.88        29\n",
      "           1       0.88      0.91      0.89        32\n",
      "\n",
      "    accuracy                           0.89        61\n",
      "   macro avg       0.89      0.88      0.88        61\n",
      "weighted avg       0.89      0.89      0.89        61\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_preds))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc3cff5f-e4c1-45de-80b4-0a59ae3ae4ba",
   "metadata": {},
   "source": [
    "## Calculate Evaluation metrics using cross-validation\n",
    "Using cross_val_score().\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "9a9cd2a6-e4f2-4e72-add5-c145cae16b70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': np.float64(0.20433597178569418), 'solver': 'liblinear'}"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check best hyperparameters\n",
    "gs_log_reg.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "0d0d6878-978e-40aa-b14c-195110dee5af",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new classifier with best parameters\n",
    "clf = LogisticRegression(C=0.2043359717856418, \n",
    "                        solver='liblinear')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "f1e2d153-f844-4394-a3ea-c3a3ae99bb98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.81967213, 0.90163934, 0.86885246, 0.88333333, 0.75      ])"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross-validated-val score\n",
    "cv_acc = cross_val_score(clf,\n",
    "                        x,\n",
    "                        y,\n",
    "                        cv=5,\n",
    "                        scoring=\"accuracy\")\n",
    "cv_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "20940d68-06c1-406c-912d-c7894cd4dce9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(0.8446994535519124)"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_acc = np.mean(cv_acc)\n",
    "cv_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "33e81829-2930-4c73-978b-4e50c26ab0cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(0.8207936507936507)"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross-validated- Re\n",
    "cv_presicion = cross_val_score(clf,\n",
    "                        x,\n",
    "                        y,\n",
    "                        cv=5,\n",
    "                        scoring=\"precision\")\n",
    "cv_presicion = np.mean(cv_precision)\n",
    "cv_presicion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "40ee25d9-751d-4761-aa5d-1e37f82a19fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(0.9212121212121213)"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross-validated- Re\n",
    "cv_recall= cross_val_score(clf,\n",
    "                        x,\n",
    "                        y,\n",
    "                        cv=5,\n",
    "                        scoring=\"recall\")\n",
    "cv_recall = np.mean(cv_recall)\n",
    "cv_recall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "784eddcc-f126-4c7b-bf8f-1a16060f68b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(0.8673007976269721)"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross-validated- f1\n",
    "cv_f1= cross_val_score(clf,\n",
    "                        x,\n",
    "                        y,\n",
    "                        cv=5,\n",
    "                        scoring=\"f1\")\n",
    "cv_f1= np.mean(cv_f1)\n",
    "cv_f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "f987f227-68f9-4985-9239-00bf5e9ea10c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiMAAAHjCAYAAADxKh+YAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAN1tJREFUeJzt3Xt8z/X///H7247mMAyLmVnlMJ9ZtH0IIceaQ1Ry6pPTVBqJoU/ig3xESVr1cfgUthQ+y6clSmqiUlbOp0h9kA0bRkzD7PD6/eG397e3bWzaPLe5XS+X9+Xi/Xw/X+/34/V6vTf3PV+v1/NlsyzLEgAAgCHlTBcAAABubYQRAABgFGEEAAAYRRgBAABGEUYAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFGEERTI7t27NWTIEPn7+8vd3V0VK1bU3XffrVmzZunMmTOmyzOmXr16Gjx4sP35r7/+KpvNpujo6OsuO3XqVNlsthv63GXLlikyMvKGlr2eq9eppLzXjYiOjpbNZtOvv/7q0D5p0iTVrVtXzs7OqlKliiTpvvvu03333VdstVxrn9lsNk2dOrXYPrskmDFjhlauXFmoZfLbfyh7nE0XgJLvnXfeUXh4uBo2bKjx48ercePGysjI0NatW7VgwQLFx8fro48+Ml1miVCrVi3Fx8frjjvuKNbPWbZsmfbu3avRo0cX6+eUdt26dVN8fLxq1aplb/v444/10ksvaeLEiQoNDZWbm5skad68ecVay7X2WXx8vOrUqVOsn2/ajBkz1Lt3b/Xq1avAy+S1/1A2EUZwTfHx8Xr66afVuXNnrVy50v6LW5I6d+6ssWPHau3atdd8j4sXL6p8+fLFXWqJ4Obmpnvuucd0Gfj/atSooRo1aji07d27V5I0atQo1axZ097euHHjm1rbH/GdcXTx4kW5u7vnuf9QNnGYBtc0Y8YM2Ww2vf322w5BJIerq6sefPBB+/N69eqpe/fuio2NVbNmzeTu7q4XX3xR0pX/BHr27KmqVavK3d1dTZs21bvvvuvwftnZ2Zo+fboaNmyo8uXLq0qVKgoKCtIbb7xh73Pq1Ck9+eST8vX1lZubm2rUqKHWrVtr3bp1+a5HRkaGatasqccffzzXa2fPnlX58uUVEREhSbp06ZLGjh2rpk2bytPTU9WqVVPLli318ccfX3d75XeY5tNPP1XTpk3l5uYmf39/zZ49O8/l586dq7Zt26pmzZqqUKGCmjRpolmzZikjI8Pe57777tOnn36qI0eOyGaz2R85Ll++rOnTp6tRo0b27TNkyBCdOnUq1zZ57rnndNttt8nDw0P33nuvNm/efN11zJGenq5p06YpICBA7u7u8vLyUvv27bVp06Z8lynMtl2xYoVatGghT09PeXh46Pbbb9fQoUPtrxfku3L1MH+9evU0adIkSZK3t7fD4ZG8DtMUZB2LYp/ldZimID8vX331lWw2m5YvX66JEyeqdu3aqly5sjp16qQDBw7kux9y5Bwq3L17tx599FH7PomIiFBmZqYOHDigBx54QJUqVVK9evU0a9asXO+RmpqqcePGyd/fX66urvLx8dHo0aOVlpbmsH5paWl699137eues61z9tEXX3yhoUOHqkaNGvLw8FB6enq+h2nWrl2rjh072r8bAQEBmjlzpv31Q4cOqV+/fqpdu7bc3Nzk7e2tjh07aufOndfdJjCDkRHkKysrS+vXr1dwcLB8fX0LvNz27du1f/9+TZo0Sf7+/qpQoYIOHDigVq1aqWbNmnrzzTfl5eWl999/X4MHD9aJEyf03HPPSZJmzZqlqVOnatKkSWrbtq0yMjL0008/6ezZs/b3f/zxx7V9+3a99NJLatCggc6ePavt27fr9OnT+dbk4uKiv/3tb1qwYIHmzp2rypUr219bvny5Ll26pCFDhki68h/QmTNnNG7cOPn4+Ojy5ctat26dHn74YUVFRWngwIGF2o5ffvmlevbsqZYtW+o///mPsrKyNGvWLJ04cSJX34MHD2rAgAH2X+y7du3SSy+9pJ9++kmLFy+WdOVwwpNPPqmDBw/mOjyWnZ2tnj17auPGjXruuefUqlUrHTlyRFOmTNF9992nrVu32kepnnjiCS1ZskTjxo1T586dtXfvXj388MM6f/78ddcpMzNToaGh2rhxo0aPHq0OHTooMzNT33//vRISEtSqVas8lyvoto2Pj1ffvn3Vt29fTZ06Ve7u7jpy5IjWr19vf6+CfFeu9tFHH2nu3LlatGiR1q5dK09Pz3wPjxR0Hf/sPstLQX9ecrzwwgtq3bq1Fi5cqNTUVP39739Xjx49tH//fjk5OV338/r06aO//e1veuqppxQXF2cPU+vWrVN4eLjGjRunZcuW6e9//7vu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QocRSQoPD1d4eHier0VHR19z2alTp2rq1Kk38rEAAKAM4t40AADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMCoGwoj8+bNk7+/v9zd3RUcHKyNGzfm2zc2NladO3dWjRo1VLlyZbVs2VKff/75DRcMAADKlkKHkZiYGI0ePVoTJ07Ujh071KZNG4WGhiohISHP/t988406d+6sNWvWaNu2bWrfvr169OihHTt2/OniAQBA6VfoMDJnzhyFhYVp2LBhCggIUGRkpHx9fTV//vw8+0dGRuq5557TX//6V9WvX18zZsxQ/fr1tXr16j9dPAAAKP0KFUYuX76sbdu2qUuXLg7tXbp00aZNmwr0HtnZ2Tp//ryqVauWb5/09HSlpqY6PAAAQNlUqDCSkpKirKwseXt7O7R7e3srOTm5QO/x2muvKS0tTX369Mm3z8yZM+Xp6Wl/+Pr6FqZMAABQitzQCaw2m83huWVZudrysnz5ck2dOlUxMTGqWbNmvv0mTJigc+fO2R+JiYk3UiYAACgFnAvTuXr16nJycso1CnLy5MlcoyVXi4mJUVhYmFasWKFOnTpds6+bm5vc3NwKUxoAACilCjUy4urqquDgYMXFxTm0x8XFqVWrVvkut3z5cg0ePFjLli1Tt27dbqxSAABQJhVqZESSIiIi9PjjjyskJEQtW7bU22+/rYSEBA0fPlzSlUMsx44d05IlSyRdCSIDBw7UG2+8oXvuucc+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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise our cross-validated metrics\n",
    "cv_metrics = pd.DataFrame({\"Accuracy\": cv_acc,\n",
    "                          \"Precision\": cv_precision,\n",
    "                          \"Recall\": cv_recall,\n",
    "                          \"F1\": cv_f1},\n",
    "                          index=[0])\n",
    "cv_metrics.T.plot.bar(title=\"Cross-validated classification metrics\",\n",
    "                     legend=False)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72f4702d-00e9-43a4-94ea-dfad65723ec5",
   "metadata": {},
   "source": [
    "### Feature importance\n",
    "Feature importance is \" asking which feature contributed most to the outcomes of the model and how did they contribute?\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "aae9c109-da11-44a6-8e79-073b46690c6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit an instance of LogisticRegression\n",
    "clf = LogisticRegression(C=0.2043359717856418, solver=\"liblinear\")\n",
    "clf.fit(x_train, y_train);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "1b1cc6da-ccd9-4923-a930-e63238b758da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>178</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   63    1   3       145   233    1        0      150      0      2.3      0   \n",
       "1   37    1   2       130   250    0        1      187      0      3.5      0   \n",
       "2   41    0   1       130   204    0        0      172      0      1.4      2   \n",
       "3   56    1   1       120   236    0        1      178      0      0.8      2   \n",
       "4   57    0   0       120   354    0        1      163      1      0.6      2   \n",
       "\n",
       "   ca  thal  target  \n",
       "0   0     1       1  \n",
       "1   0     2       1  \n",
       "2   0     2       1  \n",
       "3   0     2       1  \n",
       "4   0     2       1  "
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "5a03fb43-603b-4040-97f9-7de20395d481",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.00316728, -0.86044686,  0.66067026, -0.01156993, -0.00166375,\n",
       "         0.04386097,  0.31275876,  0.02459362, -0.60413101, -0.56862781,\n",
       "         0.45051634, -0.63609913, -0.67663373]])"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "dfda75cd-6962-4621-b0e5-8fded0c09592",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'age': np.float64(0.0031672844060666623),\n",
       " 'sex': np.float64(-0.8604468584043691),\n",
       " 'cp': np.float64(0.6606702597732366),\n",
       " 'trestbps': np.float64(-0.011569931563373848),\n",
       " 'chol': np.float64(-0.0016637465429168578),\n",
       " 'fbs': np.float64(0.04386096585317838),\n",
       " 'restecg': np.float64(0.31275875563803546),\n",
       " 'thalach': np.float64(0.024593617131781657),\n",
       " 'exang': np.float64(-0.6041310123188697),\n",
       " 'oldpeak': np.float64(-0.5686278094209853),\n",
       " 'slope': np.float64(0.45051634382650335),\n",
       " 'ca': np.float64(-0.6360991309389892),\n",
       " 'thal': np.float64(-0.6766337310511611)}"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_dict = dict(zip(df.columns, list(clf.coef_[0])))\n",
    "feature_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "12b0078f-c9ce-4cae-bb16-ecf176ead89d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise feature importance\n",
    "feature_df = pd.DataFrame(feature_dict, index=[0])\n",
    "feature_df.T.plot.bar(title=\"Feature Importance\", legend=False);\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "659308c4-7957-47d9-96dd-c5e5cfcc5f6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>target</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>slope</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>91</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "target   0    1\n",
       "slope          \n",
       "0       12    9\n",
       "1       91   49\n",
       "2       35  107"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(df[\"slope\"], df[\"target\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ace92b87-748f-4cde-b499-3b33e81faa46",
   "metadata": {},
   "source": [
    "## 6.Experimentation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87b5bacd-23b9-4b4a-8e1b-b24ab031ab05",
   "metadata": {},
   "source": [
    "\n",
    "If you haven't hit your evaluation metric yet... ask yourself...\n",
    "* Could you collect more data?\n",
    "* Could you try a better model? Like CatBoost or XGBoost?\n",
    "* Could you improve the current models? (beyond what we've done so far)\n",
    "* If your model is good enough (you have hit your evaluation metric) how would you export it and share it with others?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
